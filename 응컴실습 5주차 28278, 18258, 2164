// 28278번

#include<stdio.h>
#define MAX 1000000
int stack[MAX];
int top = -1;

void push(int x) {
	if (top < MAX - 1) {
		stack[++top] = x;
	}
}

void pop() {
	if (top > -1) {
		printf("%d\n", stack[top]);
		top--;
	}
	else printf("-1\n");
}

int main()
{
	int n;
	scanf_s("%d", &n);

	for (int i = 0; i < n; i++) {
		int command;
		scanf_s("%d", &command);

		if (command == 1) {
			int a;
			scanf_s("%d", &a);
			push(a);
		}
		else if (command == 2) {
			pop();
		}
		else if (command == 3) {
			printf("%d\n", top + 1);
		}
		else if (command == 4) {
			if (top == -1)printf("1\n");
			else printf("0\n");
		}
		else if (command == 5) {
			if (top > -1)printf("%d\n", stack[top]);
			else printf("-1\n");
		}
	}

	return 0;
}

// 18258번

#include<stdio.h>
#include<string.h>
#define MAX 2000000
int queue[MAX];
int front = -1, rear = -1;

void push(int x) {
	if (rear < MAX - 1) {
		queue[++rear] = x;
	}
}

void pop() {
	if (rear == front) {
		printf("-1\n");
	}
	else {
		printf("%d\n", queue[++front]);
	}
}

int main()
{
	int n;
	scanf_s("%d", &n);

	for (int i = 0; i < n; i++) {
		char order[10];
		scanf_s("%s", order, sizeof(order));

		if (strcmp(order, "push") == 0) {
			int a;
			scanf_s("%d", &a);
			push(a);
		}
		else if (strcmp(order, "pop") == 0) {
			pop();
		}
		else if (strcmp(order, "size") == 0) {
			printf("%d\n", rear - front);
		}
		else if (strcmp(order, "empty") == 0) {
			if (rear == front)printf("1\n");
			else printf("0\n");
		}
		else if (strcmp(order, "front") == 0) {
			if (rear == front)printf("-1\n");
			else {
				printf("%d\n", queue[front + 1]);
			}
		}
		else if (strcmp(order, "back") == 0) {
			if (rear == front)printf("-1\n");
			else {
				printf("%d\n", queue[rear]);
			}
		}
	}

	return 0;
}

// 2164번

#include<stdio.h>
#define MAX 500000
int queue[MAX];
int front = -1, rear = -1;

void push(int x) {
	if (rear < MAX -1) {
		queue[++rear] = x;
	}
}

int main()
{
	int n;
	scanf_s("%d", &n);

	for (int i = 0; i < n; i++) {
		push(i + 1);
	}

	while (1) {
		front++;
		if (rear - front == 1)break;
		queue[rear+1] = queue[front + 1];
		rear++;
		front++;
	}
	printf("%d", queue[rear]);

	return 0;
}
